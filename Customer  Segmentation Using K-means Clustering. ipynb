{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPRJGS6CV/5IGgpDSoXMuju",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/VEERU30101990/Bavikatti-Eranna/blob/main/Customer%20%20Segmentation%20Using%20K-means%20Clustering.%20ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "e1CrbIUUOENA"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.cluster import KMeans"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "customer_data = pd.read_csv(\"Mall_Customers.csv\")"
      ],
      "metadata": {
        "id": "4K2HNLgqOdgL"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "customer_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "oEh9J5njQQEZ",
        "outputId": "e6bb7547-0418-4db1-a8e3-c8782f0ba295"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-53045d39-aef1-41a6-8cf8-ae59d58a128d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53045d39-aef1-41a6-8cf8-ae59d58a128d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-53045d39-aef1-41a6-8cf8-ae59d58a128d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-53045d39-aef1-41a6-8cf8-ae59d58a128d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "customer_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pN-dzYMqQeRH",
        "outputId": "fa22088d-1aec-4670-df71-4e2ef9ce62c7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200 entries, 0 to 199\n",
            "Data columns (total 5 columns):\n",
            " #   Column                  Non-Null Count  Dtype \n",
            "---  ------                  --------------  ----- \n",
            " 0   CustomerID              200 non-null    int64 \n",
            " 1   Gender                  200 non-null    object\n",
            " 2   Age                     200 non-null    int64 \n",
            " 3   Annual Income (k$)      200 non-null    int64 \n",
            " 4   Spending Score (1-100)  200 non-null    int64 \n",
            "dtypes: int64(4), object(1)\n",
            "memory usage: 7.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = customer_data.iloc[:,[3,4]].values\n",
        "print(X)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TEDXBOb0Qk59",
        "outputId": "9a87fb13-2676-4a91-981c-88a1fbc25f96"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 15  39]\n",
            " [ 15  81]\n",
            " [ 16   6]\n",
            " [ 16  77]\n",
            " [ 17  40]\n",
            " [ 17  76]\n",
            " [ 18   6]\n",
            " [ 18  94]\n",
            " [ 19   3]\n",
            " [ 19  72]\n",
            " [ 19  14]\n",
            " [ 19  99]\n",
            " [ 20  15]\n",
            " [ 20  77]\n",
            " [ 20  13]\n",
            " [ 20  79]\n",
            " [ 21  35]\n",
            " [ 21  66]\n",
            " [ 23  29]\n",
            " [ 23  98]\n",
            " [ 24  35]\n",
            " [ 24  73]\n",
            " [ 25   5]\n",
            " [ 25  73]\n",
            " [ 28  14]\n",
            " [ 28  82]\n",
            " [ 28  32]\n",
            " [ 28  61]\n",
            " [ 29  31]\n",
            " [ 29  87]\n",
            " [ 30   4]\n",
            " [ 30  73]\n",
            " [ 33   4]\n",
            " [ 33  92]\n",
            " [ 33  14]\n",
            " [ 33  81]\n",
            " [ 34  17]\n",
            " [ 34  73]\n",
            " [ 37  26]\n",
            " [ 37  75]\n",
            " [ 38  35]\n",
            " [ 38  92]\n",
            " [ 39  36]\n",
            " [ 39  61]\n",
            " [ 39  28]\n",
            " [ 39  65]\n",
            " [ 40  55]\n",
            " [ 40  47]\n",
            " [ 40  42]\n",
            " [ 40  42]\n",
            " [ 42  52]\n",
            " [ 42  60]\n",
            " [ 43  54]\n",
            " [ 43  60]\n",
            " [ 43  45]\n",
            " [ 43  41]\n",
            " [ 44  50]\n",
            " [ 44  46]\n",
            " [ 46  51]\n",
            " [ 46  46]\n",
            " [ 46  56]\n",
            " [ 46  55]\n",
            " [ 47  52]\n",
            " [ 47  59]\n",
            " [ 48  51]\n",
            " [ 48  59]\n",
            " [ 48  50]\n",
            " [ 48  48]\n",
            " [ 48  59]\n",
            " [ 48  47]\n",
            " [ 49  55]\n",
            " [ 49  42]\n",
            " [ 50  49]\n",
            " [ 50  56]\n",
            " [ 54  47]\n",
            " [ 54  54]\n",
            " [ 54  53]\n",
            " [ 54  48]\n",
            " [ 54  52]\n",
            " [ 54  42]\n",
            " [ 54  51]\n",
            " [ 54  55]\n",
            " [ 54  41]\n",
            " [ 54  44]\n",
            " [ 54  57]\n",
            " [ 54  46]\n",
            " [ 57  58]\n",
            " [ 57  55]\n",
            " [ 58  60]\n",
            " [ 58  46]\n",
            " [ 59  55]\n",
            " [ 59  41]\n",
            " [ 60  49]\n",
            " [ 60  40]\n",
            " [ 60  42]\n",
            " [ 60  52]\n",
            " [ 60  47]\n",
            " [ 60  50]\n",
            " [ 61  42]\n",
            " [ 61  49]\n",
            " [ 62  41]\n",
            " [ 62  48]\n",
            " [ 62  59]\n",
            " [ 62  55]\n",
            " [ 62  56]\n",
            " [ 62  42]\n",
            " [ 63  50]\n",
            " [ 63  46]\n",
            " [ 63  43]\n",
            " [ 63  48]\n",
            " [ 63  52]\n",
            " [ 63  54]\n",
            " [ 64  42]\n",
            " [ 64  46]\n",
            " [ 65  48]\n",
            " [ 65  50]\n",
            " [ 65  43]\n",
            " [ 65  59]\n",
            " [ 67  43]\n",
            " [ 67  57]\n",
            " [ 67  56]\n",
            " [ 67  40]\n",
            " [ 69  58]\n",
            " [ 69  91]\n",
            " [ 70  29]\n",
            " [ 70  77]\n",
            " [ 71  35]\n",
            " [ 71  95]\n",
            " [ 71  11]\n",
            " [ 71  75]\n",
            " [ 71   9]\n",
            " [ 71  75]\n",
            " [ 72  34]\n",
            " [ 72  71]\n",
            " [ 73   5]\n",
            " [ 73  88]\n",
            " [ 73   7]\n",
            " [ 73  73]\n",
            " [ 74  10]\n",
            " [ 74  72]\n",
            " [ 75   5]\n",
            " [ 75  93]\n",
            " [ 76  40]\n",
            " [ 76  87]\n",
            " [ 77  12]\n",
            " [ 77  97]\n",
            " [ 77  36]\n",
            " [ 77  74]\n",
            " [ 78  22]\n",
            " [ 78  90]\n",
            " [ 78  17]\n",
            " [ 78  88]\n",
            " [ 78  20]\n",
            " [ 78  76]\n",
            " [ 78  16]\n",
            " [ 78  89]\n",
            " [ 78   1]\n",
            " [ 78  78]\n",
            " [ 78   1]\n",
            " [ 78  73]\n",
            " [ 79  35]\n",
            " [ 79  83]\n",
            " [ 81   5]\n",
            " [ 81  93]\n",
            " [ 85  26]\n",
            " [ 85  75]\n",
            " [ 86  20]\n",
            " [ 86  95]\n",
            " [ 87  27]\n",
            " [ 87  63]\n",
            " [ 87  13]\n",
            " [ 87  75]\n",
            " [ 87  10]\n",
            " [ 87  92]\n",
            " [ 88  13]\n",
            " [ 88  86]\n",
            " [ 88  15]\n",
            " [ 88  69]\n",
            " [ 93  14]\n",
            " [ 93  90]\n",
            " [ 97  32]\n",
            " [ 97  86]\n",
            " [ 98  15]\n",
            " [ 98  88]\n",
            " [ 99  39]\n",
            " [ 99  97]\n",
            " [101  24]\n",
            " [101  68]\n",
            " [103  17]\n",
            " [103  85]\n",
            " [103  23]\n",
            " [103  69]\n",
            " [113   8]\n",
            " [113  91]\n",
            " [120  16]\n",
            " [120  79]\n",
            " [126  28]\n",
            " [126  74]\n",
            " [137  18]\n",
            " [137  83]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X[...,0],X[...,1])\n",
        "plt.xlabel('Total Income')\n",
        "plt.ylabel('Spending Score')\n",
        "plt.show();\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "_nwuc4FC6xFB",
        "outputId": "f65735de-f950-4a54-b2f4-7127baa49daa"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# choosing the number clusters\n",
        "# WCSS - within clusters sum of squares\n",
        "# finding wcss value for different number of clusters\n",
        "\n",
        "wcss = []\n",
        "\n",
        "for i in range(1,11):\n",
        "    kmeans = KMeans(n_clusters= i,random_state = 42,)\n",
        "    kmeans.fit(X)\n",
        "    \n",
        "    wcss.append(kmeans.inertia_)"
      ],
      "metadata": {
        "id": "SaWZheY1Qy6G"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(1,11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('WCSS')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "FBDSN-eLQ5j5",
        "outputId": "862085d9-0f1b-4fd1-d81c-98637e42ee92"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=5,init = 'k-means++',random_state=42)\n",
        "Y_kmeans = kmeans.fit_predict(X)\n",
        "Y_kmeans"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ur0enMZERqgp",
        "outputId": "b7a863ac-6676-40f0-8a15-8eb98d7bffbf"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,\n",
              "       2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 0,\n",
              "       2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 0, 4, 1, 4, 1, 4,\n",
              "       0, 4, 1, 4, 1, 4, 1, 4, 1, 4, 0, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\n",
              "       1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\n",
              "       1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,\n",
              "       1, 4], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(X[Y_kmeans==0,0],X[Y_kmeans==0,1],s=50, c='green',label='cluster 1')\n",
        "plt.scatter(X[Y_kmeans==1,0],X[Y_kmeans==1,1],s=50, c='red',label='cluster 2')\n",
        "plt.scatter(X[Y_kmeans==2,0],X[Y_kmeans==2,1],s=50, c='yellow',label='cluster 3')\n",
        "plt.scatter(X[Y_kmeans==3,0],X[Y_kmeans==3,1],s=50, c='blue',label='cluster 4')\n",
        "plt.scatter(X[Y_kmeans==4,0],X[Y_kmeans==4,1],s=50, c='violet',label='cluster 5')\n",
        "\n",
        "plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='cyan',label = 'Centroids')\n",
        "plt.title('Customer Groups')\n",
        "plt.xlabel('Annual Income')\n",
        "plt.ylabel('Spending Score')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "WSHc_xss8h0Y",
        "outputId": "d8f6fe3a-a456-4511-f5de-d4e44822071f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "customer_data['Target'] = Y_kmeans\n",
        "customer_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "FFMobWRV-obm",
        "outputId": "e25f887c-fa62-4a16-9887-eac1e29ecf22"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)  \\\n",
              "0             1    Male   19                  15                      39   \n",
              "1             2    Male   21                  15                      81   \n",
              "2             3  Female   20                  16                       6   \n",
              "3             4  Female   23                  16                      77   \n",
              "4             5  Female   31                  17                      40   \n",
              "..          ...     ...  ...                 ...                     ...   \n",
              "195         196  Female   35                 120                      79   \n",
              "196         197  Female   45                 126                      28   \n",
              "197         198    Male   32                 126                      74   \n",
              "198         199    Male   32                 137                      18   \n",
              "199         200    Male   30                 137                      83   \n",
              "\n",
              "     Target  \n",
              "0         2  \n",
              "1         3  \n",
              "2         2  \n",
              "3         3  \n",
              "4         2  \n",
              "..      ...  \n",
              "195       4  \n",
              "196       1  \n",
              "197       4  \n",
              "198       1  \n",
              "199       4  \n",
              "\n",
              "[200 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d6a8ff6-f31c-45b8-a3f9-bccc9ad8fbeb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "      <th>Target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>196</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>120</td>\n",
              "      <td>79</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>197</td>\n",
              "      <td>Female</td>\n",
              "      <td>45</td>\n",
              "      <td>126</td>\n",
              "      <td>28</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>198</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>126</td>\n",
              "      <td>74</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>199</td>\n",
              "      <td>Male</td>\n",
              "      <td>32</td>\n",
              "      <td>137</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>200</td>\n",
              "      <td>Male</td>\n",
              "      <td>30</td>\n",
              "      <td>137</td>\n",
              "      <td>83</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d6a8ff6-f31c-45b8-a3f9-bccc9ad8fbeb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6d6a8ff6-f31c-45b8-a3f9-bccc9ad8fbeb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6d6a8ff6-f31c-45b8-a3f9-bccc9ad8fbeb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    }
  ]
}